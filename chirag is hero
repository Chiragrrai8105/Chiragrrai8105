def astarAlgo(start_node,stop_node):
    open_set=set([start_node])
    closed_set=set()
    g={start_node:0}
    parents={start_node:start_node}
    while open_set:
        n=None
        for v in open_set:
            if n is None or g[v]+heuristic(v)<g[n]+heuristic(n):
                n=v
        if n is None:
            print("Path does not exist")
            return None
        if n==stop_node:
            path
            while parents[n]!=n:
                path.append(n)
                n=parents[n]
            path.append(start_node)
            path.reverse()
            print("Path found:(path)")
            return path
        open_set.remove(n)
        closed_set.add(n)
        for(m,weight) in get_neighbors(n):
            if m in closed_set:
                continue
            tentative_g=g[n]+weight
            if m not in open_set or tentative_g<g[n]:
                g[m]=tentative_g
                parents[m]=n
                open_set.add(m)
    print("path does not exist")
    return None 
def get_neighbors(v):
    return Graph_nodes.get(v,[])
def heuristic(n):
    H_dist={'A':14,'B':12,'C':11,'D':6,'E':4,'F':11,'Z':0}
    return H_dist[n]
Graph_nodes={
    'A':[('B',4),('C',3)],
    'B':[('F',5),('E',12)],
    'C':[('E',10),('D',7)],
    'D':[('C',7),('E',2)],
    'E':[('B',12),('E',5)],
    'F':[('B',5),('Z',16)]
} 
astarAlgo('A','Z')        
